var isCartPage = Insider.systemRules.call('isOnCartPage'); var currency = Insider.systemRules.call('getCurrency'); var preferredCurrency = Insider.currencyService.to; function decodeHtml(html) { return Insider.dom('<div>').html(html).text(); } function documentTrigger() { setTimeout(function() { Insider.eventManager.dispatch('cart:amount:update'); }, 250); } function removeDuplicates(array) { var uniqueElements = {}; var uniqueArray = []; for (var i = 0; i < array.length; i++) { var key = array[i]; if (!uniqueElements[key]) { uniqueElements[key] = true; uniqueArray.push(array[i]); } } return uniqueArray; } function getFormattedProductObject(product) { var price = parseFloat(((parseFloat(product.discounted_price || product.price) || 0) / 100).toFixed(2)) || 0; var visitedProducts = JSON.parse(Insider.storage.localStorage.get('ins-shopify-products-info') || '{}').value || {}; var cats = (visitedProducts[product.product_id] || {}).taxonomy || []; return { cats: removeDuplicates(cats).slice(0, 50), exchange: 'from ' + currency + ' to ' + preferredCurrency, id: (product.id || '').toString().trim(), name: encodeURIComponent(decodeHtml((product.product_title || '').trim())), notConvertedPrice: price, price: price, originalPrice: parseFloat(((parseFloat(product.price_original || product.original_price) || 0) / 100).toFixed(2)) || price, img: (product.image || '').split('?')[0], url: window.location.origin + (product.url || ''), quantity: product.quantity || 1, time: Insider.dateHelper.now() }; } function updateCartStorageFromIO(lineItems, oldProductList) { var productList = []; lineItems.forEach(function(item) { var price = item.product.unit_sale_price || item.product.unit_price || 0; if (price > 0) { productList.push({ cats: removeDuplicates(item.product.taxonomy).slice(0, 50), exchange: 'from ' + currency + ' to ' + preferredCurrency, id: item.product.id || '', img: item.product.product_image_url || '', name: encodeURIComponent(decodeHtml(item.product.name || '')), originalPrice: item.product.unit_price || price || 0, notConvertedPrice: price || 0, price: price || 0, quantity: item.quantity || 1, time: Insider.dateHelper.now(), url: item.product.url || '', }); } }); setCartStorages(productList, oldProductList); } function setCartStorages(productList, oldProductList) { productList = Insider.currencyService.getConvertedPrice(currency, preferredCurrency, productList); var totalCartAmount = 0; var totalQuantity = 0; productList.forEach(function(product) { totalQuantity += product.quantity; totalCartAmount += product.quantity * product.price; }); Insider.utils.cart.storeCartProductStorage({ totalQuantity: totalQuantity, productList: productList }); Insider.storage.localStorage.set({ name: 'paid-products', value: productList }); Insider.storage.localStorage.set({ name: 'total-cart-amount', value: parseFloat(totalCartAmount.toFixed(2)) || 0 }); Insider.storage.localStorage.set({ name: 'ins-temp-product-list', value: productList }); documentTrigger(); if (!(isCartPage && !Insider.__external.shopifyCartUpdated && productList.length === 0)) { compareProductListAndEventTrigger(productList, oldProductList); } Insider.__external.shopifyCartUpdated = true; } function resetCartStorages() { Insider.utils.cart.storeCartProductStorage({ totalQuantity: 0, productList: [] }); Insider.storage.localStorage.set({ name: 'total-cart-amount', value: 0 }); Insider.storage.localStorage.set({ name: 'paid-products', value: [] }); Insider.storage.localStorage.set({ name: 'ins-temp-product-list', value: [] }); documentTrigger(); } function compareProductListAndEventTrigger(newList, oldList) { newList.forEach(function(newItem) { var isExists = oldList.some(function(oldItem, index) { if (newItem.id === oldItem.id) { var quantityChange = newItem.quantity - oldItem.quantity; if (quantityChange !== 0) { newItem.quantity = quantityChange > 0 ? quantityChange : quantityChange * -1; Insider.eventManager.dispatch('cart:count:update', { product: newItem, isAddedToCart: quantityChange > 0 }); } oldList.splice(index, 1); return true; } }); if (!isExists) { Insider.eventManager.dispatch('cart:count:update', { product: newItem, isAddedToCart: true }); } }); oldList.forEach(function(oldItem) { Insider.eventManager.dispatch('cart:count:update', { product: oldItem, isAddedToCart: false }); }); } Insider.eventManager.once('ins:shopify:cart:update', window, Insider.fns.debounce(function(event) { var response = typeof event.detail === 'object' ? event.detail : (JSON.parse(event.detail) || {}); var oldProductList = (Insider.storageAccessor.cartProductList() || {}).productList || []; if (response.items) { var items = response.items || []; var newProductList = []; items = items.forEach(function(item) { if (item.price > 0) { newProductList.push(getFormattedProductObject(item)); } }); setCartStorages(newProductList, oldProductList); } }, 1000)); Insider.eventManager.once('ins:shopify:product:add', window, Insider.fns.debounce(function(event) { var response = typeof event.detail === 'object' ? event.detail : (JSON.parse(event.detail) || {}); if (!response.id) { if (!(response.items || [])[0].id) { return; } response = (response.items || [])[0]; } var product = getFormattedProductObject(response); if (product.price <= 0) { return; } var oldProductList = (Insider.storageAccessor.cartProductList() || {}).productList || []; var hasProductAddedPreviously = false; var newProductList = oldProductList.map(function(item) { if (product.id === item.id) { hasProductAddedPreviously = true; item = product; } return item; }); if (!hasProductAddedPreviously) { newProductList.push(product); } setCartStorages(newProductList, oldProductList); }, 1000)); if (!Insider.systemRules.call('isOnAfterPaymentPage')) { if (!Insider.__external.ajaxListenerShopify) { Insider.__external.ajaxListenerShopify = function(callback) { 'use strict'; var oldOpen = XMLHttpRequest.prototype.open; XMLHttpRequest.prototype.open = function(method, url) { this.addEventListener('readystatechange', function() { if (this.responseType !== 'arraybuffer' && this.responseType !== 'blob' && this.readyState === 4 && this.status === 200 && typeof callback === 'function') { callback(url, method, this.response); } }); oldOpen.apply(this, arguments); }; }; Insider.__external.ajaxListenerShopify(function(url, method, response) { if (url.indexOf('/add.js') > -1) { Insider.eventManager.dispatch('ins:shopify:product:add', response); } else if (url.indexOf('/cart.js') > -1 || url.indexOf('/change.js') > -1 || url.indexOf('/update.js') > -1 || url.indexOf('/clear.js') > -1) { Insider.eventManager.dispatch('ins:shopify:cart:update', response); } }); } if (!Insider.__external.fetchListenerShopify) { Insider.__external.listenFetchRequest = function(callback) { const originalFetchFunction = window.fetch; window.fetch = function(url, options) { const response = originalFetchFunction.apply(this, arguments); try { response.then(function(val) { return val.clone().text(); }).then(function(data) { callback(url, data, options); }); } catch (error) { Insider.errorBag.add({ className: '', methodName: 'listenFetchRequest:freeJS', stack: error, }); } return response; }; }; Insider.__external.listenFetchRequest(function(url, response) { if (url.indexOf('/cart.js') > -1 || url.indexOf('/change.js') > -1 || url.indexOf('/update.js') > -1 || url.indexOf('/clear.js') > -1) { Insider.eventManager.dispatch('ins:shopify:cart:update', response); } else if (url.indexOf('cart/add') > -1) { Insider.eventManager.dispatch('ins:shopify:product:add', response); } }); } } if (isCartPage) { var oldProductList = Insider.storage.localStorage.get('ins-temp-product-list') || (Insider.storageAccessor.cartProductList() || {}).productList || []; Insider.utils.cart.updateCartCount(); Insider.utils.cart.updateCartCookies(); setTimeout(function() { updateCartStorageFromIO(Insider.utils.getDataFromIO('basket', 'line_items', []), oldProductList); }, 250); }
